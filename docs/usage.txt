
=====
Usage
=====

Django-mailer is asynchronous, so in addition to putting e-mail on the 
queue you need to periodically tell it to clear the queue and actually 
send the mail.

The actual sending of e-mail is handled via a command extension.

Putting Mail On The Queue
=========================

There are two primary ways of putting e-mail on the queue; the 
``Message`` object and the ``send_mail`` function.

The ``Message`` object allows you to send both plain text and multi-part
text+html messages::

    from mailer import Message
    # queue a plain text message
    Message(to_address="alice@localhost", 
            from_address="bob@localhost",
            subject="Hello...",
            message_body="Testing... 1, 2, buckle my shoe.",
	    )
    # queue a text+html message
    Message(to_address="alice@localhost", 
            from_address="bob@localhost",
            subject="Hello...html",
            message_body="Testing... 1, 2, buckle my shoe.",
            message_body_html="Testing... 1, 2, buckle <em>my</em> shoe.",
	    )
 
Because the ``send_mail`` function in django-mailer has the same 
signature as Django's core ``send_mail`` function, you can do the 
following in your code::

    # favour django-mailer but fall back to django.core.mail
    from django.conf import settings

    if "mailer" in settings.INSTALLED_APPS:
        from mailer import send_mail
    else:
        from django.core.mail import send_mail

and then just call ``send_mail`` like you normally would in Django::

    send_mail(subject, message_body, settings.DEFAULT_FROM_EMAIL, recipients)

Additionally you can send all the admins as specified in the 
``ADMIN`` setting by calling::

    mail_admins(subject, message_body)

or all managers as defined in the ``MANAGERS`` setting by calling::

    mail_managers(subject, message_body)

Clear Queue With Command Extensions
===================================

With mailer in your INSTALLED_APPS, there will be two new manage.py 
commands you can run:

* ``send_mail`` will clear the current message queue. If there are any failures, they will be marked deferred and will not be attempted again by ``send_mail``.

* ``retry_deferred`` will move any deferred mail back into the normal queue (so it will be attempted again on the next ``send_mail``).

You may want to set these up via cron to run regularly::

    PROJECT=/path/to/your/project
    
    * * * * *       (cd $PROJECT; /usr/local/bin/python2.5 manage.py send_mail >> $PROJECT/cron_mail.log 2>&1)
    0,20,40 * * * * (cd $PROJECT; /usr/local/bin/python2.5 manage.py retry_deferred >> $PROJECT/cron_mail_deferred.log 2>&1)

This attempts to send mail every minute with a retry on failure 
every 20 minutes.

``manage.py send_mail`` uses a lock file in case clearing the queue 
takes longer than the interval between calling ``manage.py send_mail``.